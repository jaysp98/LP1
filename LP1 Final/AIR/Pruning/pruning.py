# -*- coding: utf-8 -*-
"""pruning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iF7XOUHRkwdAs04jPw5FM1rwpKvmsjF2
"""

import numpy as np
from IPython.display import Image
import time
from PIL import Image

a=[3, 5, 6, 9, 1, 2, 0, -1]

b=['3', '5', '6', '9', '1', '2', '0', '-1']

from anytree import Node, RenderTree

l0=Node("Root")
l1=Node("Min1",parent=l0)
l2=Node("Min2",parent=l0)
l3=Node("Max1",parent=l1)
l4=Node("Max2",parent=l1)
l5=Node("Max3",parent=l2)
l6=Node("Max4",parent=l2)
a0= Node(a[0],parent=l3)
a1 = Node(a[1], parent=l3)
a2 = Node(a[2], parent=l4)
a3 = Node(a[3], parent=l4)
a4 = Node(a[4], parent=l5)
a5 = Node(a[5], parent=l5)
a6 = Node(a[6], parent=l6)
a7 = Node(a[7], parent=l6)

from anytree.exporter import DotExporter
DotExporter(l0).to_picture("udo.png")
path = "udo.png"
display(Image.open(path))

d=[]



MIN=-1000
MAX=1000

def prune(depth,index,check,alpha,beta,a):
    
    

    
    if depth==3:
        l0=Node("Root")
        l1=Node("Min1",parent=l0)
        l2=Node("Min2",parent=l0)
        l3=Node("Max1",parent=l1)
        l4=Node("Max2",parent=l1)
        l5=Node("Max3",parent=l2)
        l6=Node("Max4",parent=l2)
        c = b.copy()
        c[index] = '** I am ' + c[index] + '* Visited *'
        a0= Node(c[0],parent=l3)
        a1 = Node(c[1], parent=l3)
        a2 = Node(c[2], parent=l4)
        a3 = Node(c[3], parent=l4)
        a4 = Node(c[4], parent=l5)
        a5 = Node(c[5], parent=l5)
        a6 = Node(c[6], parent=l6)
        a7 = Node(c[7], parent=l6)   

        DotExporter(l0).to_picture("udo.png")
        path = "udo.png"
        display(Image.open(path))
        time.sleep(2)
        d.append(index)
       
        return a[index]
    
    if check==True:
        best=MIN
        for i in range(2):
            value=prune(depth+1,2*index+i,False,alpha,beta,a)
            best=max(best,value)
            alpha=max(best,value)
            
            if alpha>=beta:
                break
        
        return best
    
    else :
        best=MAX
        for i in range(2):
            value=prune(depth+1,2*index+i,True,alpha,beta,a)
            best=min(best,value)
            beta=min(best,beta)
            
            if beta<=alpha:
                break
                
        return best

value=prune(0,0,True,MIN,MAX,a)

print("The pruned value is" ,value)

d

a=b.copy()

for i in range(8):
    flag=0
    for j in range(5):
        if(i==d[j]):
            flag=1
            break
            
    if flag==0:
        a[i]=' *I am pruned* ' +str(a[i])

from anytree import Node, RenderTree

l0=Node("Root")
l1=Node("Min1",parent=l0)
l2=Node("Min2",parent=l0)
l3=Node("Max1",parent=l1)
l4=Node("Max2",parent=l1)
l5=Node("Max3",parent=l2)
l6=Node("Max4",parent=l2)
a0= Node(a[0],parent=l3)
a1 = Node(a[1], parent=l3)
a2 = Node(a[2], parent=l4)
a3 = Node(a[3], parent=l4)
a4 = Node(a[4], parent=l5)
a5 = Node(a[5], parent=l5)
a6 = Node(a[6], parent=l6)
a7 = Node(a[7], parent=l6)

from anytree.exporter import DotExporter
DotExporter(l0).to_picture("udo.png")
display(Image.open(path))